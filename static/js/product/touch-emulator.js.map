{"version":3,"sources":["webpack:///./node_modules/@vant/touch-emulator/index.js"],"names":["window","eventTarget","supportTouch","document","createTouch","view","target","identifier","pageX","pageY","screenX","screenY","Touch","clientX","pageXOffset","clientY","pageYOffset","createTouchList","touchList","TouchList","i","arguments","length","Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","s","el","this","parentElement","parentNode","nodeType","pos","deltaX","deltaY","initiated","TouchEmulator","index","id","onMouse","touchType","ev","type","dispatchEvent","triggerTouch","eventName","mouseEv","touchEvent","createEvent","initEvent","altKey","ctrlKey","metaKey","shiftKey","touches","getActiveTouches","targetTouches","changedTouches","push","addEventListener"],"mappings":"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","file":"static/js/product/touch-emulator.js","sourcesContent":["/* eslint-disable */\n/**\n * Emulate touch event\n * Sourceï¼šhttps://github.com/hammerjs/touchemulator\n */\n\n(function () {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  var eventTarget;\n  var supportTouch = 'ontouchstart' in window;\n\n  // polyfills\n  if (!document.createTouch) {\n    document.createTouch = function (\n      view,\n      target,\n      identifier,\n      pageX,\n      pageY,\n      screenX,\n      screenY\n    ) {\n      // auto set\n      return new Touch(\n        target,\n        identifier,\n        {\n          pageX: pageX,\n          pageY: pageY,\n          screenX: screenX,\n          screenY: screenY,\n          clientX: pageX - window.pageXOffset,\n          clientY: pageY - window.pageYOffset,\n        },\n        0,\n        0\n      );\n    };\n  }\n\n  if (!document.createTouchList) {\n    document.createTouchList = function () {\n      var touchList = TouchList();\n      for (var i = 0; i < arguments.length; i++) {\n        touchList[i] = arguments[i];\n      }\n      touchList.length = arguments.length;\n      return touchList;\n    };\n  }\n\n  if (!Element.prototype.matches) {\n    Element.prototype.matches =\n      Element.prototype.msMatchesSelector ||\n      Element.prototype.webkitMatchesSelector;\n  }\n\n  if (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n      var el = this;\n\n      do {\n        if (el.matches(s)) return el;\n        el = el.parentElement || el.parentNode;\n      } while (el !== null && el.nodeType === 1);\n\n      return null;\n    };\n  }\n\n  /**\n   * create an touch point\n   * @constructor\n   * @param target\n   * @param identifier\n   * @param pos\n   * @param deltaX\n   * @param deltaY\n   * @returns {Object} touchPoint\n   */\n\n  var Touch = function Touch(target, identifier, pos, deltaX, deltaY) {\n    deltaX = deltaX || 0;\n    deltaY = deltaY || 0;\n\n    this.identifier = identifier;\n    this.target = target;\n    this.clientX = pos.clientX + deltaX;\n    this.clientY = pos.clientY + deltaY;\n    this.screenX = pos.screenX + deltaX;\n    this.screenY = pos.screenY + deltaY;\n    this.pageX = pos.pageX + deltaX;\n    this.pageY = pos.pageY + deltaY;\n  };\n\n  /**\n   * create empty touchlist with the methods\n   * @constructor\n   * @returns touchList\n   */\n  function TouchList() {\n    var touchList = [];\n\n    touchList['item'] = function (index) {\n      return this[index] || null;\n    };\n\n    // specified by Mozilla\n    touchList['identifiedTouch'] = function (id) {\n      return this[id + 1] || null;\n    };\n\n    return touchList;\n  }\n\n  /**\n   * only trigger touches when the left mousebutton has been pressed\n   * @param touchType\n   * @returns {Function}\n   */\n\n  var initiated = false;\n  function onMouse(touchType) {\n    return function (ev) {\n      // prevent mouse events\n\n      if (ev.type === 'mousedown') {\n        initiated = true;\n      }\n\n      if (ev.type === 'mouseup') {\n        initiated = false;\n      }\n\n      if (ev.type === 'mousemove' && !initiated) {\n        return;\n      }\n\n      // The EventTarget on which the touch point started when it was first placed on the surface,\n      // even if the touch point has since moved outside the interactive area of that element.\n      // also, when the target doesnt exist anymore, we update it\n      if (\n        ev.type === 'mousedown' ||\n        !eventTarget ||\n        (eventTarget && !eventTarget.dispatchEvent)\n      ) {\n        eventTarget = ev.target;\n      }\n\n      if (eventTarget.closest('[data-no-touch-simulate]') == null) {\n        triggerTouch(touchType, ev);\n      }\n\n      // reset\n      if (ev.type === 'mouseup') {\n        eventTarget = null;\n      }\n    };\n  }\n\n  /**\n   * trigger a touch event\n   * @param eventName\n   * @param mouseEv\n   */\n  function triggerTouch(eventName, mouseEv) {\n    var touchEvent = document.createEvent('Event');\n    touchEvent.initEvent(eventName, true, true);\n\n    touchEvent.altKey = mouseEv.altKey;\n    touchEvent.ctrlKey = mouseEv.ctrlKey;\n    touchEvent.metaKey = mouseEv.metaKey;\n    touchEvent.shiftKey = mouseEv.shiftKey;\n\n    touchEvent.touches = getActiveTouches(mouseEv);\n    touchEvent.targetTouches = getActiveTouches(mouseEv);\n    touchEvent.changedTouches = createTouchList(mouseEv);\n\n    eventTarget.dispatchEvent(touchEvent);\n  }\n\n  /**\n   * create a touchList based on the mouse event\n   * @param mouseEv\n   * @returns {TouchList}\n   */\n  function createTouchList(mouseEv) {\n    var touchList = TouchList();\n    touchList.push(new Touch(eventTarget, 1, mouseEv, 0, 0));\n    return touchList;\n  }\n\n  /**\n   * receive all active touches\n   * @param mouseEv\n   * @returns {TouchList}\n   */\n  function getActiveTouches(mouseEv) {\n    // empty list\n    if (mouseEv.type === 'mouseup') {\n      return TouchList();\n    }\n    return createTouchList(mouseEv);\n  }\n\n  /**\n   * TouchEmulator initializer\n   */\n  function TouchEmulator() {\n    window.addEventListener('mousedown', onMouse('touchstart'), true);\n    window.addEventListener('mousemove', onMouse('touchmove'), true);\n    window.addEventListener('mouseup', onMouse('touchend'), true);\n  }\n\n  // start distance when entering the multitouch mode\n  TouchEmulator['multiTouchOffset'] = 75;\n\n  if (!supportTouch) {\n    new TouchEmulator();\n  }\n})();\n"],"sourceRoot":""}